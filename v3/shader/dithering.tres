[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

float luma(vec3 color) {
  return dot(color, vec3(0.299, 0.587, 0.114));
}

float luma4(vec4 color) {
  return dot(color.rgb, vec3(0.299, 0.587, 0.114));
}

float dither2x2(vec2 position, float brightness) {
  int x = int(mod(position.x, 2.0));
  int y = int(mod(position.y, 2.0));
  int index = x + y * 2;
  float limit = 0.0;

  if (x < 8) {
    if (index == 0) limit = 0.25;
    if (index == 1) limit = 0.75;
    if (index == 2) limit = 1.00;
    if (index == 3) limit = 0.50;
  }

  // return brightness < limit ? 0.0 : 1.0;
  return brightness < limit ? 1.0 : 0.0;
}

vec3 dither2x23(vec2 position, vec3 color) {
  return color * dither2x2(position, luma(color));
}

vec4 dither2x24(vec2 position, vec4 color) {
  return vec4(color.rgb, dither2x2(position, luma4(color)) * color.a);
}


vec4 ditherKags(vec2 position, vec4 color){
  int n = 2;
  return color;


}

// hint color
uniform vec4 Color: hint_color; 

void fragment(){
	vec4 pixelColor = texture(TEXTURE, UV);
	vec2 pos = UV * TEXTURE_PIXEL_SIZE;
	vec4 ditherColor = vec4(1.0, 1.0, 1.0, 0);
	
	vec3 dithered = dither2x23(FRAGCOORD.xy, pixelColor.rgb);
	vec4 dithered4 = dither2x24(FRAGCOORD.xy, pixelColor);
	

	COLOR = dithered4;
	/* COLOR = vec4(dithered, pixelColor.a) * Color; */
	/* COLOR = pixelColor * Color; */
}
"
