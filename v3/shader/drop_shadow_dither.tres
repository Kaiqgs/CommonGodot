[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec2 offset = vec2(8.0, 8.0);
uniform vec4 modulate : hint_color;
uniform bool invert = false;


float luma(vec3 color) {
  return dot(color, vec3(0.299, 0.587, 0.114));
}

float luma4(vec4 color) {
  return dot(color.rgb, vec3(0.299, 0.587, 0.114));
}

float dither1x1(vec2 position, float brightness) {
  int x = int(mod(position.x, 2.0));
  int y = int(mod(position.y, 2.0));
  int index = x + y * 2;
  bool condition = (x == 0 && y == 1) || (x == 1 && y == 0);

  if(invert){
    return condition ? 1.0 : 0.0;
  }
  else{
    return condition ? 0.0 : 1.0;
  }
}

float dither2x2(vec2 position, float brightness) {
  int x = int(mod(position.x, 2.0));
  int y = int(mod(position.y, 2.0));
  int index = x + y * 2;
  float limit = 0.0;

  if (x < 8) {
    if (index == 0) limit = 0.25;
    if (index == 1) limit = 0.75;
    if (index == 2) limit = 1.00;
    if (index == 3) limit = 0.50;
  }

  return brightness < limit ? 0.0 : 1.0;
}

float dither4x4(vec2 position, float brightness) {
  int x = int(mod(position.x, 4.0));
  int y = int(mod(position.y, 4.0));
  int index = x + y * 4;
  float limit = 0.0;

  if (x < 8) {
    if (index == 0) limit = 0.0625;
    if (index == 1) limit = 0.5625;
    if (index == 2) limit = 0.1875;
    if (index == 3) limit = 0.6875;
    if (index == 4) limit = 0.8125;
    if (index == 5) limit = 0.3125;
    if (index == 6) limit = 0.9375;
    if (index == 7) limit = 0.4375;
    if (index == 8) limit = 0.25;
    if (index == 9) limit = 0.75;
    if (index == 10) limit = 0.125;
    if (index == 11) limit = 0.625;
    if (index == 12) limit = 1.0;
    if (index == 13) limit = 0.5;
    if (index == 14) limit = 0.875;
    if (index == 15) limit = 0.375;
  }

  return brightness < limit ? 0.0 : 1.0;
}


vec3 dither2x23(vec2 position, vec3 color) {
  return color * dither2x2(position, luma(color));
}

vec4 dither2x24(vec2 position, vec4 color) {
  return vec4(color.rgb, dither1x1(position, luma4(color)) * color.a);
}

// hint color
uniform vec4 Color: hint_color; 

/**
void fragment(){
	vec4 pixelColor = texture(TEXTURE, UV);
	vec2 pos = UV * TEXTURE_PIXEL_SIZE;
	vec4 ditherColor = vec4(1.0, 1.0, 1.0, 0);
	
	vec4 dithered = dither2x24(FRAGCOORD.xy, pixelColor);
	if(dithered == pixelColor){		
		dithered.a = 0.0;
	}
	COLOR = dithered * Color;
}
**/

void fragment() {
	vec2 ps = TEXTURE_PIXEL_SIZE;

	vec4 shadow = vec4(modulate.rgb, texture(TEXTURE, UV - offset * ps).a * modulate.a);
	
	shadow = dither2x24(FRAGCOORD.xy, shadow);
	vec4 col = texture(TEXTURE, UV);
	vec4 shadowColor = mix(shadow, col, col.a);
	vec4 dithered = dither2x24(FRAGCOORD.xy, shadowColor);
	if(dithered == shadowColor){		
		dithered.a = 0.0;
	}

	COLOR = shadowColor;
}"
